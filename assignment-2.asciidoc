

+*In[61]:*+
[source, ipython3]
----
#Task 1 - Q1.1
#Python Program to implement your own myreduce() function which works exactly like Python's built-in function reduce() 
def myreduce(fun, list1):
    a=list1[0]
    for i in range(1,len(list1)):
        a=fun(a,list1[i])
    return a

x=myreduce(lambda m,n:m+n, [1,2,3,4])
print(x)  
----


+*Out[61]:*+
----
10
----


+*In[63]:*+
[source, ipython3]
----
#Task 1 - Q1.2
# Python program to implement myfilter() function which works exactly like Python's built-in function filter() 
def myfilter(fun,list1):
    b=[]
    for i in range(1,len(list1)):
        a=fun(list1[i])
        if a==True:
            b.append(list1[i])
    return list(b)  

x=myfilter(lambda x:x%2==0, [1,2,3,4,5])
print(x)
y=myfilter(lambda x:x%2,[1,2,3,4,5])
print(y)
z=myfilter(lambda x:x%3==0,[1,2,3,4,5,6])
print(z)

----


+*Out[63]:*+
----
[2, 4]
[3, 5]
[3, 6]
----


+*In[84]:*+
[source, ipython3]
----
#Task 1 - Q2
#Implement List comprehensions to produce the following lists

#['A', 'C', 'A', 'D', 'G', 'I', ’L’, ‘ D’] 
print([i for i in "ACADGILD"])

#['x', 'xx', 'xxx', 'xxxx', 'y', 'yy', 'yyy', 'yyyy', 'z', 'zz', 'zzz', 'zzzz'] 
print([i*j for i in 'xyz' for j in range(1,5)])

#['x', 'y', 'z', 'xx', 'yy', 'zz', 'xx', 'yy', 'zz', 'xxxx', 'yyyy', 'zzzz'] 
print([i*j for j in range(1,5) for i in 'xyz'])

#[[2], [3], [4], [3], [4], [5], [4], [5], [6]]
print([[i+j] for i in range(1,4) for j in range(1,4)])

#[[2, 3, 4, 5], [3, 4, 5, 6], [4, 5, 6, 7], [5, 6, 7, 8]] 
print([[i+j for i in range(1,5)] for j in range(1,5)])

#[(1, 1), (2, 1), (3, 1), (1, 2), (2, 2), (3, 2), (1, 3), (2, 3), (3, 3)] 
print([(j,i) for i in range(1,4) for j in range(1,4)])
----


+*Out[84]:*+
----
['A', 'C', 'A', 'D', 'G', 'I', 'L', 'D']
['x', 'xx', 'xxx', 'xxxx', 'y', 'yy', 'yyy', 'yyyy', 'z', 'zz', 'zzz', 'zzzz']
['x', 'y', 'z', 'xx', 'yy', 'zz', 'xxx', 'yyy', 'zzz', 'xxxx', 'yyyy', 'zzzz']
[[2], [3], [4], [3], [4], [5], [4], [5], [6]]
[[2, 3, 4, 5], [3, 4, 5, 6], [4, 5, 6, 7], [5, 6, 7, 8]]
[(1, 1), (2, 1), (3, 1), (1, 2), (2, 2), (3, 2), (1, 3), (2, 3), (3, 3)]
----


+*In[89]:*+
[source, ipython3]
----
#Task 1 - Q3
#Implement a function longestWord() that takes a list of words and returns the longest one
def longest_word(list1):
    long_word=list1[0]
    for i in range(1,len(list1)):
        if len(list1[i])>len(long_word):
            long_word=list1[i]
        else:
            continue
    print("longest word in the list is: {}".format(long_word))

longest_word(['one','two','three','four'])           

----


+*Out[89]:*+
----
longest word in the list is: three
----


+*In[1]:*+
[source, ipython3]
----
#Task 2: Q-1.1  
#Python Program(with class concepts) to find the area of the triangle using formula area = (s*(s-a)*(s-b)*(s-c)) ** 0.5 
class Length_Sides():
    def __init__(self):
        self.x=int(input("enter lenght of side1:"))
        self.y=int(input("enter lenght of side2:"))
        self.z=int(input("enter lenght of side3:"))
        #return (self.side1,self.side2,self.side3)
class Area(Length_Sides):
    def area(self):
        #super(Area, self).__init__()
        #print(Length_Sides.sides.side1)
        self.ar=Length_Sides.x
        print(self.ar)
        
a=Area()
a.area()
----


+*Out[1]:*+
----
enter lenght of side1:1
enter lenght of side2:2
enter lenght of side3:3


    ---------------------------------------------------------------------------

    AttributeError                            Traceback (most recent call last)

    <ipython-input-1-14963df5a8e6> in <module>
         15 
         16 a=Area()
    ---> 17 a.area()
    

    <ipython-input-1-14963df5a8e6> in area(self)
         11         #super(Area, self).__init__()
         12         #print(Length_Sides.sides.side1)
    ---> 13         self.ar=Length_Sides.x
         14         print(self.ar)
         15 
    

    AttributeError: type object 'Length_Sides' has no attribute 'x'

----


+*In[7]:*+
[source, ipython3]
----
#Task 2 - Q 1.2
#function to filter_long_words() that takes a list of words and an integer n and returns the list of words that are longer than n. 

def filter_long_words(x,n):
    
    list1=[i for i in x if len(i)>n]
    return(list1)

x=[]
y=int(input("how many words you want to enter : "))
for i in range(0,y):
    word=input("enter word {}".format(i+1))
    x.append(word)
z=int(input("more than what length of words you want to be printed : "))

filter_long_words(x,z)


----


+*Out[7]:*+
----
how many words you want to enter : 4
enter word 1one
enter word 2two
enter word 3three
enter word 4four
more than what length of words you want to be printed : 3
['three', 'four']----


+*In[4]:*+
[source, ipython3]
----
#Task2 - Q - 2.1
# Python program using function concept that maps  list of words into a list of integers representing the lengths of the corresponding words​.

def map_words(list1):
    x=[]
    for i in list1:
        x.append(len(i))
    return x

y=int(input("how many words you want to enter : "))
x=[]
for i in range(0,y):
    word=input("enter word {}".format(i+1))
    x.append(word)
    
list2=map_words(x)
print("Len of words is {}".format(list2))


----


+*Out[4]:*+
----
how many words you want to enter : 3
enter word 1one
enter word 2four
enter word 3three
Len of words is [3, 4, 5]
----


+*In[9]:*+
[source, ipython3]
----
#Task 2 - Q 2.2
#Write a Python function which takes a character (i.e. a string of length 1) and returns True if it is a vowel, False otherwise

def char_map(x):
    if x in ['a','e','i','o','u']:
        return True
    else:
        return False
    
char=input("enter a character :")
if len(char)>1:
    print("you have not entered a character")
else:
    vow=char_map(char.lower())
    if vow==True:
        print("you have entered a vowel")
    else:
        print(" char you have entered is not a vowel")
----


+*Out[9]:*+
----
enter a character :i
you have entered a vowel
----


+*In[ ]:*+
[source, ipython3]
----

----
